Задача: Определение, является ли дата выходным днем

Напишите программу, которая проверяет, является ли введенная дата выходным днем (суббота или воскресенье).
Требования:

    Вводится дата в формате YYYY-MM-DD.
    Программа должна вывести "Выходной" или "Не выходной", в зависимости от того, является ли указанная дата выходным днем.
    Если введена некорректная дата, программа должна вывести сообщение "Некорректная дата".



Задача: Определение дня недели для заданной даты

Напишите программу, которая принимает дату в формате YYYY-MM-DD и выводит день недели, который соответствует этой дате.
Требования:

    Вводится дата в формате YYYY-MM-DD.
    Программа должна вывести день недели, например: "Понеделник", "Вторник", "Среда" и так далее.
    Если введена некорректная дата, программа должна вывести сообщение "Некорректная дата".


    

Описание:

Напишите программу, которая принимает на вход список дат начала и окончания отпусков 
сотрудников и находит, сколько рабочих дней было в каждом отпуске. Программа должна учитывать 
выходные (субботу и воскресенье) и праздничные дни, которые задаются отдельно.
Условия задачи:

    Программа должна принимать список отпусков, где каждый отпуск задан как пара дат: дата начала отпуска и дата окончания.
    Также программа должна принимать список праздничных дней, которые считаются нерабочими.
    Программа должна выводить количество рабочих дней для каждого отпуска. Рабочие дни — это все дни 
    между датами начала и окончания отпуска, за исключением выходных и праздничных дней.

Требования:

    Использовать модуль datetime для работы с датами.
    Использовать модуль calendar для определения выходных.
    Программа должна учитывать все выходные дни (субботу и воскресенье) и список праздничных дней.







"""
import datetime
import calendar

def get_working_days(start_date, end_date, holidays):
    # Преобразуем строки в объекты datetime
    start_date = datetime.datetime.strptime(start_date, '%Y-%m-%d').date()
    end_date = datetime.datetime.strptime(end_date, '%Y-%m-%d').date()
    
    # Считаем количество рабочих дней
    working_days = 0
    current_date = start_date
    
    while current_date <= end_date:
        # Проверяем, является ли текущий день выходным или праздником
        if current_date.weekday() < 5 and current_date not in holidays:  # Понедельник - Пятница
            working_days += 1
        current_date += datetime.timedelta(days=1)
    
    return working_days

def main():
    # Пример отпусков
    vacations = [
        ('2024-06-01', '2024-06-10'),  # Отпуск с 1 по 10 июня
        ('2024-07-01', '2024-07-14'),  # Отпуск с 1 по 14 июля
    ]
    
    # Пример праздничных дней
    holidays = {
        datetime.date(2024, 6, 12),   # Праздничный день 12 июня
        datetime.date(2024, 7, 4),    # Праздничный день 4 июля
    }
    
    for vacation in vacations:
        start, end = vacation
        working_days = get_working_days(start, end, holidays)
        print(f'Отпуск с {start} по {end} содержит {working_days} рабочих дней.')
        
if __name__ == "__main__":
    main()
"""